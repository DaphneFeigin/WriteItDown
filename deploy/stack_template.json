{
    "Parameters": {
        "KeyName": {
            "Type": "String",
            "Description": "SSH key for EC2 instances"
        },
        "DomainName": {
            "Type": "String",
            "Description": "Domain name for Route53 record",
            "Default": "pisomojado.org"
        }
    },
    "Outputs": {
        "Ec2InstanceId": {
            "Value": { "Ref": "SingleEc2Instance" },
            "Description": "InstanceId of single EC2 instance"
        },
        "Ec2InstancePublicIp": {
            "Value": { "Fn::GetAtt": [ "SingleEc2Instance", "PublicIp" ] },
            "Description": "Public IP of single EC2 instance"
        },
        "CodeDeployTrustRoleARN": {
            "Value": {
                "Fn::GetAtt": [ "CodeDeployTrustRole", "Arn" ]
            }
        }
    },
    "Resources": {
        "Vpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Tags" : [ {"Key" : "Name", "Value" : "WriteItDownVPC"} ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [ { "Key": "Name", "Value": "WriteItDownIGW" } ]
            }
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": { "Ref": "Vpc" },
                "InternetGatewayId": { "Ref": "InternetGateway" }
            }
        },
        "SingleSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Tags": [ {"Key": "Name", "Value": "WriteItDownSubnet"} ],
                "VpcId": { "Ref": "Vpc" }
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "Vpc" }
            }
        },
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "RouteTableId": { "Ref": "RouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" }
            }
        },
        "SubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "SingleSubnet" },
                "RouteTableId": { "Ref": "RouteTable" }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "Vpc" }
            }
        },
        "IngressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "EgressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "NetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "NetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "SingleSubnet" },
                "NetworkAclId": { "Ref": "NetworkAcl" }
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow web traffic, SSH, ping from everywhere",
                "Tags": [ {"Key": "Name", "Value": "WriteItDownSecurityGroup"} ],
                "VpcId": { "Ref": "Vpc" },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "0.0.0.0/0" }
                ],
                "SecurityGroupEgress": [
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "0.0.0.0/0" }
                ]
            }
        },
        "IamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                   "Version" : "2012-10-17",
                   "Statement": [ {
                      "Effect": "Allow",
                      "Principal": {
                         "Service": [ "ec2.amazonaws.com" ]
                      },
                      "Action": [ "sts:AssumeRole" ]
                   } ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "CodeDeployPolicy",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:Describe*",
                                        "cloudformation:Describe*",
                                        "cloudformation:GetTemplate"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "S3Policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [ {
                                "Sid": "Stmt1410060373000",
                                "Effect": "Allow",
                                "Action": [
                                  "s3:Get*"
                                ],
                                "Resource": [
                                  "arn:aws:s3:::aws-codedeploy*",
                                  "arn:aws:s3:::WriteItDown/latest.zip",
                                  "arn:aws:s3:::WriteItDown/selfsigned_cert.pem",
                                  "arn:aws:s3:::WriteItDown/selfsigned_key.pem"
                                ]
                            } ]
                        }
                    },
                    {
                        "PolicyName": "DDBPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [ {
                                "Sid": "Stmt1410138623000",
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:BatchGetItem",
                                  "dynamodb:BatchWriteItem",
                                  "dynamodb:DeleteItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:PutItem",
                                  "dynamodb:Query",
                                  "dynamodb:Scan",
                                  "dynamodb:UpdateItem"
                                ],
                                "Resource": [
                                  { "Fn::Join": [ ":", [ "arn:aws:dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/WriteItDown" ] ] },
                                  { "Fn::Join": [ ":", [ "arn:aws:dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/WriteItDown/index/IsComplete-index" ] ] },
                                  { "Fn::Join": [ ":", [ "arn:aws:dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/WriteItDown/index/TaskTitle-index" ] ] },
                                  { "Fn::Join": [ ":", [ "arn:aws:dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/WriteItDown/index/TimeDue-index" ] ] },
                                  { "Fn::Join": [ ":", [ "arn:aws:dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/WriteItDownUser" ] ] },
                                  { "Fn::Join": [ ":", [ "arn:aws:dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/WriteItDown/index/SessionExpiration-index" ] ] }
                                ]
                            } ]
                        }
                    }
                ]
            }
        },
        "IamInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ { "Ref": "IamRole" } ]
            }
        },
        "SingleEc2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-76817c1e",
                "InstanceType": "t2.micro",
                "IamInstanceProfile": { "Ref": "IamInstanceProfile" },
                "KeyName": { "Ref": "KeyName" },
                "NetworkInterfaces": [ {
                    "GroupSet": [ { "Ref": "InstanceSecurityGroup" }  ],
                    "AssociatePublicIpAddress": "true",
                    "DeviceIndex": "0",
                    "DeleteOnTermination": "true",
                    "SubnetId": { "Ref": "SingleSubnet" }
                } ],
                "Tags": [ { "Key": "Name", "Value": "WriteItDownSingleInstance" } ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [ "", [
                            "#!/bin/bash -ex\n",
                            "yum update -y aws-cfn-bootstrap\n",
                            "yum install -y aws-cli\n",
                            "function error_exit\n",
                            "{\n",
                            "   /opt/aws/bin/cfn-signal -e 1 --stack ", { "Ref": "AWS::StackName" }, " --resource SingleEc2Instance\n",
                            "   exit 1\n",
                            "}\n",
                            "aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' /tmp || error_exit\n",
                            "yum -y install /tmp/codedeploy-agent.noarch.rpm || error_exit\n",
                            "/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackId" }, " -r SingleEc2Instance --region ", { "Ref": "AWS::Region" }, " || error_exit\n",
                            "/opt/aws/bin/cfn-signal -e 0 --stack ", { "Ref": "AWS::StackName" }, " --resource SingleEc2Instance\n"
                        ] ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "services": {
                        "sysvinit": {
                            "codedeploy-agent": {
                                "enabled": "true",
                                "ensureRunning": "true"
                            }
                        }
                    }
                }
            }
        },
        "Route53RecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "Comment": "WriteItDown record, auto-created by CloudFormation stack",
                "HostedZoneName": { "Fn::Join": [ "", [ { "Ref": "DomainName" }, "." ] ] },
                "Name": { "Fn::Join": [ "", [ "writeitdown.", { "Ref": "DomainName" }, "." ] ] },
                "Type": "A",
                "TTL": "60",
                "ResourceRecords": [ { "Fn::GetAtt": [ "SingleEc2Instance", "PublicIp" ] } ]
            }
        },
        "CodeDeployTrustRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Sid": "1",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "codedeploy.us-east-1.amazonaws.com",
                      "codedeploy.us-west-2.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Path": "/"
          }
        },
        "CodeDeployRolePolicies": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyName": "CodeDeployPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Action": [
                    "ec2:Describe*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "autoscaling:DeleteLifecycleHook",
                    "autoscaling:DescribeLifecycleHooks",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:PutLifecycleHook",
                    "autoscaling:RecordLifecycleActionHeartbeat"
                  ]
                }
              ]
            },
            "Roles": [
              {
                "Ref": "CodeDeployTrustRole"
              }
            ]
          }
        },
    }
}